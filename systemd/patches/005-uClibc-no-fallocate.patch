Index: systemd-218/src/journal/journal-file.c
===================================================================
--- systemd-218.orig/src/journal/journal-file.c
+++ systemd-218/src/journal/journal-file.c
@@ -38,6 +38,8 @@
 #include "compress.h"
 #include "fsprg.h"
 
+#include "config.h"
+
 #define DEFAULT_DATA_HASH_TABLE_SIZE (2047ULL*sizeof(HashItem))
 #define DEFAULT_FIELD_HASH_TABLE_SIZE (333ULL*sizeof(HashItem))
 
@@ -316,7 +318,7 @@ static int journal_file_verify_header(Jo
 
 static int journal_file_allocate(JournalFile *f, uint64_t offset, uint64_t size) {
         uint64_t old_size, new_size;
-        int r;
+        int r = 0;
 
         assert(f);
 
@@ -364,10 +366,24 @@ static int journal_file_allocate(Journal
         /* Note that the glibc fallocate() fallback is very
            inefficient, hence we try to minimize the allocation area
            as we can. */
+#ifndef __UCLIBC__
         r = posix_fallocate(f->fd, old_size, new_size - old_size);
         if (r != 0)
                 return -r;
-
+#else
+        /* Use good old method to write zeros into the journal file
+           perhaps very inefficient yet working. */
+        if(new_size > old_size) {
+                char *buf = alloca(new_size - old_size);
+                off_t oldpos = lseek(f->fd, 0, SEEK_CUR);
+                bzero(buf, new_size - old_size);
+                lseek(f->fd, old_size, SEEK_SET);
+                r = write(f->fd, buf, new_size - old_size);
+                lseek(f->fd, oldpos, SEEK_SET);
+        }
+        if (r < 0)
+                return -errno;
+#endif /* __UCLIBC__ */
         if (fstat(f->fd, &f->last_stat) < 0)
                 return -errno;
 
Index: systemd-218/src/journal/journald-kmsg.c
===================================================================
--- systemd-218.orig/src/journal/journald-kmsg.c
+++ systemd-218/src/journal/journald-kmsg.c
@@ -441,6 +441,7 @@ fail:
 
 int server_open_kernel_seqnum(Server *s) {
         int fd;
+        int r = 0;
         uint64_t *p;
 
         assert(s);
@@ -455,7 +456,19 @@ int server_open_kernel_seqnum(Server *s)
                 return 0;
         }
 
-        if (posix_fallocate(fd, 0, sizeof(uint64_t)) < 0) {
+#ifndef __UCLIBC__
+        r = posix_fallocate(fd, 0, sizeof(uint64_t));
+#else
+        /* Use good old method to write zeros into the journal file
+           perhaps very inefficient yet working. */
+        char *buf = alloca(sizeof(uint64_t));
+        off_t oldpos = lseek(fd, 0, SEEK_CUR);
+        bzero(buf, sizeof(uint64_t));
+        lseek(fd, 0, SEEK_SET);
+        r = write(fd, buf, sizeof(uint64_t));
+        lseek(fd, oldpos, SEEK_SET);
+#endif /* __UCLIBC__ */
+        if (r < 0) {
                 log_error("Failed to allocate sequential number file, ignoring: %m");
                 close_nointr_nofail(fd);
                 return 0;
